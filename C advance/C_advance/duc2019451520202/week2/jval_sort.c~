#include<stdio.h>
#include<stdlib.h>
#include<string.h>
typedef union{
  int i;
  long l;
  float f;
  double d;
  void *v;
  char *s;
  char c;
} Jval;

Jval new_jval_i(int i){ Jval j; j.i=i; return j;}
Jval new_jval_l(long l){ Jval j; j.l=l; return j;}
Jval new_jval_f(float f){ Jval j; j.f=f; return j;}
Jval new_jval_d(double d){ Jval j; j.d=d; return j;}
Jval new_jval_v(void *v){ Jval j; j.v = v; return j;}

int jval_i(Jval j){ return j.i;}
int jval_l(Jval j){ return j.l;}
int jval_f(Jval j){ return j.f;}
int jval_d(Jval j){ return j.d;}
int *jval_v(Jval j){ return j.v;}

int int_compare(Jval *a, Jval*b){
  return jval_i(*a) - jval_i(*b);
}

void swap(Jval *a, Jval *b){
  Jval tmp=*a;
  *a=*b;
  *b=tmp;
  return;
}
void exch(Jval *arr, int i, int j){
  swap(arr+ size*i, arr + size*j);
  return;
}

void sort(Jval a[], int l, int r,
	  int (*compare)(Jval*, Jval*)) {
  if (r <= l) return;
  int i = l-1, j = r;
  int p = l-1, q = r;
  while(1)
    {
      while (compare(a[++i], a[r]) < 0 );
      while (compare[r], a[--j] < 0 )
	if (j == l) break;
      if (i >= j) break;
      exch(a, i, j);
      if (compare(a[i], a[r])==0)
	exch(a, ++p, i);
      if (compare(a[j], a[r])==0)
	exch(a, --q, j);
    }
  exch(a, i, r);
  j = i - 1;
  i = i + 1;
  for (int k = l ; k <= p; k++) exch(a, k, j--);
  for (int k = r-1; k >= q; k--) exch(a, k, i++);
  sort(a, l, j, compare);
  sort(a, i, r, compare);
}
int main(){
  Jval a;
  return 0;
}
